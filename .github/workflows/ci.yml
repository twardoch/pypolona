name: Python CI/CD

on:
  push:
    branches: [ main, master ] # Adjust if your main branch has a different name
    tags:
      - 'v*' # Also trigger on version tags
  pull_request:
    branches: [ main, master ]

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Needed for hatch-vcs to determine version from git tags

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      run: curl -LsSf https://astral.sh/uv/install.sh | sh

    - name: Install dependencies
      run: |
        uv venv --python ${{ matrix.python-version }} .venv
        source .venv/bin/activate
        uv pip install -e .[dev]
        # Install GTK dependencies for wxPython (needed by Gooey)
        sudo apt-get update
        sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev

    - name: Lint with Ruff
      run: |
        source .venv/bin/activate
        ruff check .
        ruff format --check .

    - name: Type check with Mypy
      run: |
        source .venv/bin/activate
        mypy pypolona/

    - name: Test with Pytest
      run: |
        source .venv/bin/activate
        pytest

    - name: Build package
      run: |
        source .venv/bin/activate
        hatch build

  # Optional: Publish to PyPI on new version tags
  # publish-to-pypi:
  #   needs: lint-and-test # Ensure tests and linting pass before publishing
  #   runs-on: ubuntu-latest
  #   if: startsWith(github.ref, 'refs/tags/v') # Only run on version tags
  #   steps:
  #   - uses: actions/checkout@v4
  #     with:
  #       fetch-depth: 0 # For hatch-vcs
  #
  #   - name: Set up Python
  #     uses: actions/setup-python@v5
  #     with:
  #       python-version: "3.12" # Or your preferred Python version for publishing
  #
  #   - name: Install uv and build tools
  #     run: |
  #       curl -LsSf https://astral.sh/uv/install.sh | sh
  #       source $HOME/.cargo/env # To make uv available in PATH for next steps
  #       uv venv .venv
  #       source .venv/bin/activate
  #       uv pip install hatch twine
  #
  #   - name: Build package
  #     run: |
  #       source .venv/bin/activate
  #       hatch build -t sdist -t wheel
  #
  #   - name: Publish package to PyPI
  #     env:
  #       TWINE_USERNAME: __token__
  #       TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }} # Store your PyPI token as a GitHub secret
  #     run: |
  #       source .venv/bin/activate
  #       twine upload dist/*
  #
  #   # Optional: Create GitHub Release
  #   - name: Create GitHub Release
  #     uses: softprops/action-gh-release@v2 # Check for latest version
  #     if: startsWith(github.ref, 'refs/tags/')
  #     with:
  #       files: dist/*
  #       # body_path: CHANGELOG.md # Optional: path to your changelog
  #       # prerelease: ${{ contains(github.ref, '-rc') || contains(github.ref, '-alpha') || contains(github.ref, '-beta') }} # Optional: mark as pre-release
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
